{
  "name": "PaperGUI",
  "tagline": "A clone of dat.GUI using nice Polymer paper elements.",
  "body": "# PaperGUI\r\n\r\n\r\nA clone of [dat.GUI](https://github.com/dataarts/dat.gui) using nice\r\n[Polymer (1.0)](https://www.polymer-project.org/1.0/docs/) paper elements. One of the advantages is that this makes it touch and mobile friendly. The API is intentionally similar, although not all features have been ported to PaperGUI.\r\n\r\n\r\n## Install\r\n\r\n\r\nBuilding requires node, gulp and bower.\r\n```\r\nnpm install gulp bower\r\nnpm install\r\nnpm run-script build\r\n```\r\nThe `dist` folder contains the build. The `paper-gui.html` file is the only one\r\nyou need if you want to use web component-style, synchronous import.\r\nOtherwise, you'll need all 3 files in the `dist` folder as `paperGUI.js` loads\r\nthe other two.\r\n\r\n\r\nTo try out the demo, run a webserver in the papergui root folder, eg:\r\n```python\r\npython -m SimpleHTTPServer 8000\r\n```\r\nThen open http://localhost:8000/demo.html in a browser.\r\n\r\n\r\n## Usage\r\n\r\n\r\n### Basic usage\r\n\r\n\r\nWith very little code, PaperGUI creates an interface that you can use to modify variables, exactly like [dat.GUI](https://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage) from which the below example is adapted.\r\n```html\r\n<script type=\"text/javascript\">\r\nvar FizzyText = function() {\r\n  this.message = 'PaperGUI';\r\n  this.speed = 0.8;\r\n  this.displayOutline = false;\r\n  this.explode = function() { ... };\r\n  // Define render logic ...\r\n};\r\n\r\n/* Polymer elements are loaded asynchronously, we need to wait for\r\n * everything to be ready before creating the GUI. */\r\ndocument.addEventListener('PaperGUIReady', function(e) {\r\n  var text = new FizzyText();\r\n  var gui = new PaperGUI();\r\n  gui.add(text, 'message');\r\n  gui.add(text, 'speed', -5, 5);\r\n  gui.add(text, 'displayOutline');\r\n  gui.add(text, 'explode');\r\n};\r\n</script>\r\n\r\n<!-- Load the PaperGUI library and polyfills -->\r\n<script type=\"text/javascript\" src=\"dist/paperGUI.js\"></script>\r\n```\r\n\r\n- The property must be public, i.e. defined by `this.prop = value`\r\n- PaperGUI determines controller type based on a property's initial value\r\n- Press H to show/hide all GUI's.\r\n\r\n##### Importing PaperGUI as a web component\r\n\r\nAs shown above, the `paperGUI.js` script loads a polyfill and then imports the web components necessary for the PaperGUI library to work. Once it's all set, it triggers a `PaperGUIReady` event. This allows to delay the loading of PaperGUI as much as possible.\r\n\r\nAlternatively, you can skip the loader script call and use a (blocking) import directly. Add this at the top of your HTML:\r\n\r\n```html\r\n<link rel=\"import\" href=\"dist/paper-gui.html\">\r\n```\r\n\r\nNote that in this case no `PaperGUIReady` event will be triggered, and the import will only work on web component-ready browsers as this bypasses support detection and polyfill loading.\r\n\r\n### Constrain\r\n\r\n\r\nYou can specify limits on numbers. A number with a min and max value becomes a slider. This is exactly the [same API as dat.GUI](https://workshop.chromeexperiments.com/examples/gui/#2--Constraining-Input).\r\n\r\n\r\n```javascript\r\ngui.add(text, 'noiseStrength').step(5); // Increment amount\r\ngui.add(text, 'growthSpeed', -5, 5); // Min and max\r\ngui.add(text, 'maxSize').min(0).step(0.25); // Mix and match\r\n```\r\nYou can also choose to select from a dropdown of values for both numbers and strings.\r\n```javascript\r\n// Choose from accepted values\r\ngui.add(text, 'message', [ 'pizza', 'chrome', 'hooray' ] );\r\n\r\n\r\n// Choose from named values\r\ngui.add(text, 'speed', { Stopped: 0, Slow: 0.1, Fast: 5 } );\r\n```\r\n\r\n\r\n### Events\r\n\r\n\r\nYou can listen for events on individual controllers using an event listener syntax.\r\n\r\n\r\n```javascript\r\nvar controller = gui.add(fizzyText, 'maxSize', 0, 10);\r\n\r\n\r\ncontroller.onChange(function(value) {\r\n  // Fires on every change, drag, keypress, etc.\r\n});\r\n```\r\n\r\n\r\nNote: the `onFinishChange` handler [from dat.GUI](https://workshop.chromeexperiments.com/examples/gui/#7--Events) is currently not supported.\r\n\r\n\r\n## Styling & positioning\r\n\r\n\r\nPaperGUI exposes custom CSS properties and mixins (see [Polymer documentation](https://www.polymer-project.org/1.0/docs/devguide/styling#custom-css-properties)) through which you can change the colors and style of the UI.\r\n\r\n\r\n### Custom properties\r\n\r\n\r\nProperties below can be used to modify the default colors of the PaperGUI interface and components:\r\n\r\n\r\n| Custom Property                     | Description                                                                  |\r\n| ----------------------------------- |------------------------------------------------------------------------------|\r\n| `--paper-gui-accent-color`          | Accent used in the floating action button, toggle buttons, sliders, etc.     |\r\n| `--paper-gui-accent-contrast-color` | Applied to fonts and icons where the background uses accent color (buttons)  |\r\n| `--paper-gui-background-color`      | Background color of the main dialog                                          |\r\n| `--paper-gui-text-color`            | Main color for text inputs, labels, dropdown values, etc.                    |\r\n| `--paper-gui-ui-color`              | Used in components (borders, sliders, input placeholders, etc.)              |\r\n| `--paper-gui-ui-secondary-color`    | Lighter shade of the above color, used in scrollbars and dividers            |\r\n\r\n\r\n##### Example\r\n\r\n\r\nIn your main html file, declare the following [custom-style](https://www.polymer-project.org/1.0/docs/devguide/styling#custom-css-properties) to override default colors:\r\n\r\n\r\n```html\r\n<style is=\"custom-style\">\r\n  paper-gui {\r\n    --paper-gui-text-color: #808080;\r\n    --paper-gui-background-color: white;\r\n    --paper-gui-accent-color: #1976d2;\r\n    --paper-gui-ui-color: #bbb;\r\n    --paper-gui-ui-secondary-color: #f1f1f1;\r\n  }\r\n</style>\r\n```\r\n\r\n\r\n### Mixins\r\nIf you need to further customize the edit button or the dialog, ie change their positioning or size, you can use dedicated custom mixins.\r\n\r\n\r\n| Custom Mixin                        | Description                                                                                        |\r\n| ----------------------------------- |----------------------------------------------------------------------------------------------------|\r\n| `--paper-gui-edit-button`           | Use this to customize the edit button                                                              |\r\n| `--paper-gui-dialog`                | Use this to override the size and positioning of the dialog (eg to place it in a different corner) |\r\n\r\n\r\n##### Example\r\nIn your main html file:\r\n\r\n\r\n```html\r\n<style is=\"custom-style\">\r\n  paper-gui {\r\n    --paper-gui-edit-button: {\r\n      position: relative;\r\n      top: 0;\r\n      left: 0;\r\n    };\r\n    --paper-gui-dialog: {\r\n      position: absolute;\r\n      top: auto;\r\n      right: auto;\r\n      bottom: 0;\r\n      left: 0;\r\n      width: 50%;\r\n    };\r\n  }\r\n</style>\r\n```\r\n\r\n\r\n## Reference\r\n\r\n\r\n### PaperGUI constructor parameters\r\n\r\nThe PaperGUI constructor can accept an object containing various options (eg. `var gui = new PaperGUI({autoPlace: false});`)\r\n\r\n| Property name | Type    | Description |\r\n|---------------|---------|-------------|\r\n| `autoPlace`   | Boolean | Whether to automatically append the PaperGUI element to the DOM as soon as at least one controller has been added. Default is **true**. |\r\n\r\n\r\n### PaperGUI methods\r\n\r\nPaperGUI has several methods.\r\n\r\n| Method name | Description |\r\n|-------------|-------------|\r\n| `add()`     | Creates and returns a new UI controller (controller type varies depending on the arguments, see next section). |\r\n| `el()`      | Returns the main Element for this PaperGUI (ie a `paper-gui` component). Useful for attaching it to the DOM manually when `autoPlace` is disabled. |\r\n| `open()`    | Opens the dialog containing the controllers. Equivalent to clicking the edit button. |\r\n| `close()`   | Closes the dialog containing the controllers. Equivalent to clicking the close button in the dialog. |\r\n| `hide()`    | Hides all PaperGUI elements (edit button, dialog with controllers). Equivalent to pressing the 'H' key. |\r\n| `show()`    | Shows all previously hidden PaperGUI elements. |\r\n\r\n\r\n\r\n### Controller types\r\n\r\nHere's a summary of the controller types PaperGUI currently supports:\r\n\r\n\r\n| PaperGUI Controller type | Property type | Extra parameters |\r\n|--------------------------|---------------|------------------|\r\n| Button                   | Function      | *N/A*            |\r\n| Toggle                   | Boolean       | *N/A*            |\r\n| Text input               | String        | *N/A*            |\r\n| Select box               | String        | **[String value]** An array of accepted values for the property, required to create a select box instead of a text input)|\r\n| Slider                   | Number        | **Number minValue** (optional, default 0), **Number maxValue** (optional, default 100) |\r\n| Select box               | Number        | **{String label: Number value}** An object whose property names will be used as labels and corresponding values will be set on the property when selected. Required to create a select box instead of a slider.|\r\n\r\n\r\n### Controller methods\r\n\r\n\r\nAll controller methods return themselves, allowing to chain method calls. Here is a list of methods.\r\n\r\n\r\n| Method                       | Description                                              | Controller types  |\r\n|------------------------------|----------------------------------------------------------|-------------------|\r\n| `name(labelString)`          | Defines the label or placeholder text for the controller | All               |\r\n| `onChange(callbackFunction)` | Calls the function when the value changes                | All except Button |\r\n| `min(minNumber)`             | Sets the minimum authorized value                        | Slider            |\r\n| `max(minNumber)`             | Sets the maximum authorized value                        | Slider            |\r\n| `step(stepNumber)`           | Sets the step size                                       | Slider            |\r\n\r\n\r\n## TODO\r\n\r\n\r\n- Add live demos\r\n- Add folders/tabs structure capability and other features from the original dat.GUI\r\n\r\n\r\n## Known issues\r\n\r\n\r\n- Select box change callback fires on controller creation (intended?)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}